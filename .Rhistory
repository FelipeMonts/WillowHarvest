Census.part2.o$Plants[i-1]
Census.part2.o$Plants[i]
Census.part2.o$No.plants..Rows.[i]==9999
Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
i=4
(Census.part2.o$No.plants..Rows.[i]==9999)
Census.part2.o$No.plants..Rows.[i]
Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
Census.part2.o$Plants[i]
for (i in 2:dim(Census.part2.o)[1]) {
if (Census.part2.o$No.plants..Rows.[i]==9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
}
if (Census.part2.o$No.plants..Rows.[i]==9999)
Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
for (i in 2:dim(Census.part2.o)[1]) {
if (Census.part2.o$No.plants..Rows.[i]==9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1] ;
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i] ;
}
for (i in 2:dim(Census.part2.o)[1]) {
if (Census.part2.o$No.plants..Rows.[i]==9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
}
Census.part2.o$No.plants..Rows.[i]==9999
Census.part2.o$No.plants..Rows.[i]
View(Census.part2.o)
Census.part2.o<-Census.part2[order(Census.part2$Date_time),]
Census.part2.o$No.plants..Rows.
(Census.part2.o$No.plants..Rows.[i]==9999)
for (i in 2:dim(Census.part2.o)[1]) {
if (Census.part2.o$No.plants..Rows.[i]==9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
}
str(Census.part2.o)
Census.part2.o$No.plants..Rows.[i]
Census.part2.o$No.plants..Rows.
Census.part2.o$No.plants..Rows.[i] ==  9999
for (i in 2:dim(Census.part2.o)[1]) {
if (Census.part2.o$No.plants..Rows.[i] ==  9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
}
2:dim(Census.part2.o)[1]
i=2
(Census.part2.o$No.plants..Rows.[i]
)
Census.part2.o$No.plants..Rows.[i] ==  9999
Census.part2.o$Plants[i]
Census.part2.o$Plants[i-1]
# create a variable to update the No.Plants.rows variable
Census.part2.o$Plants[1]<-9999
#in this census, the first value of No.plants..Rows. is '1' a legitimate value therefore it is not changed
Census.part2.o$No.plants..Rows.[1]<-Census.part2.o$Plants[1]<-1
for (i in 2:dim(Census.part2.o)[1]) {
if (Census.part2.o$No.plants..Rows.[i] ==  9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
}
Census.part2.o$Plants[i-1]
i
2:dim(Census.part2.o)[1]-1
for (i in 2:dim(Census.part2.o)[1]-1) {
if (Census.part2.o$No.plants..Rows.[i] ==  9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
}
i
dim(Census.part2.o)[1]
Census.part2.o$No.plants..Rows.[5248]
is.na(Census.part2.o$No.plants..Rows.[5248])
which(is.na(Census.part2.o$No.plants..Rows.),arr.ind=T)
2:dim(Census.part2.o)[1]-2
for (i in 2:dim(Census.part2.o)[1]-2) {
if (Census.part2.o$No.plants..Rows.[i] ==  9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
}
2:dim(Census.part2.o)[1]
2:(dim(Census.part2.o)[1]-2)
for (i in 2:(dim(Census.part2.o)[1]-2) {
seq(2,dim(Census.part2.o)[1]-2)
for (i in seq(2,dim(Census.part2.o)[1]-2)) {
if (Census.part2.o$No.plants..Rows.[i] ==  9999)  Census.part2.o$Plants[i]<-Census.part2.o$Plants[i-1]
else  Census.part2.o$Plants[i]<-Census.part2.o$No.plants..Rows.[i]
}
View(Census.part2.o)
Final.data.part2<-Census.part2.o[!Census.part2.o$lat==9999,]
View(Final.data.part2)
#Export the data to added to the GPS file
write.csv(Final.data,file='Final.data_part2.R20200322.csv')
Plant.Data.part2.2013<-SpatialPointsDataFrame(coords=as.matrix(Final.data.part2[,c("lon", "lat")]), data=Final.data.part2, proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
Plant.Data.part2.2013<-spTransform(Plant.Data.part2.2013, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(Plant.Data.part2.2013, col=c("RED", "BLUE", "GREEN"),pch=1) #,add=T)
writeOGR(Plant.Data.part2.2013,"PlantDatapart22013.shp",layer="PlantDatapart22013", driver="ESRI Shapefile") ;
##############################################################################################################
#
#
# Program to manage and analyze willow harvest research data
#
#
#
#
#  Felipe Montes 2020/02/19
#
#
#
#
###############################################################################################################
###############################################################################################################
#                             Tell the program where the package libraries are stored
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###############################################################################################################
#                             Setting up working directory  Loading Packages and Setting up working directory
###############################################################################################################
#      set the working directory
#readClipboard()
setwd("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowHarvestPaper\\WillowHarvest") ;   #
###############################################################################################################
#                            Install the packages that are needed
###############################################################################################################
# Install the packages that are needed #
#install.packages('fields', dep=T)
#install.packages('LatticeKrig', dep=T)
#install.packages('rgeos', dep=T)
###############################################################################################################
#                           load the libraries that are neded
###############################################################################################################
library(rgdal) ;
library(soilDB) ;
library(aqp) ;
library(sp) ;
library(raster) ;
library(openxlsx);
library(fields);
library(LatticeKrig)
library(rgeos)
###############################################################################################################
#                           load willow harvest data from 2015
###############################################################################################################
#readClipboard()
Harvest2015<-read.xlsx("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowRockViewData\\Yield Data\\RockviewWillowHarvest_chips20160222 (1).xlsx", sheet= "PivotTable", startRow = 1 ,colNames = T , cols= c(seq(1,9)), rows=c(seq(1,133)) );
#View(Harvest2015)
#str(Harvest2015)
names(Harvest2015)
#### convert the row and the variety data to factors
Harvest2015$Factor.Row<-as.factor(Harvest2015$`Actual.Row.#`) ;
#levels(Harvest2015$Factor.Row)
Harvest2015$Cultivar<-as.factor(Harvest2015$Variety) ;
#levels(Harvest2015$Cultivar)
###############################################################################################################
#                           load willow harvest data from 2019
###############################################################################################################
#readClipboard()
Harvest2019<-read.xlsx("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowRockViewData\\Wilow Harvest 2019\\RockviewWillowHarvest2019V2.xlsx", sheet= "Yield", startRow = 2 ,colNames = T , cols= c(seq(1,10)), rows=c(seq(1,134)) );
#View(Harvest2019)
#str(Harvest2015)
names(Harvest2019)
#### convert the row and the variety data to factors
Harvest2019$Factor.Row<-as.factor(Harvest2019$Row) ;
#levels(Harvest2019$Factor.Row)
Harvest2019$Cultivar<-as.factor(Harvest2019$Variety) ;
#levels(Harvest2019$Cultivar)
###############################################################################################################
#                           load Willow field GIS Maps
###############################################################################################################
#################    Tractor GPS Coverage Maps ######################
########### Read infor mation about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\BrianGISFile Tractor\\Coverage.shp")  ;
#### read the shape file
TractorGPS.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\BrianGISFile Tractor\\Coverage.shp")  ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
TractorGPS<-spTransform(TractorGPS.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(TractorGPS)
#################   Extract rows based on the tractor gps files and boundary files recorded with the GPS ######################
Boundary.Polygon.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Boundary_Track_2014-04-11 09_00_54_Polygon.shp") ;
Boundary.Polygon<-spTransform(Boundary.Polygon.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(Boundary.Polygon, add=T,col="RED")
##### read the tractor lines that are inside the boundary
Tractor.Inside.Boundary.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\TractorCoverageinsideBoudaryTrack.shp") ;
Tractor.Inside.Boundary<-spTransform(Tractor.Inside.Boundary.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )  ;
plot(Tractor.Inside.Boundary, add=T,col="BLUE");
##### Select the first line and the middle of the line by using the centroids of the tractor polygons
FirstlineTractor.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\FirstLineTractorCoverage.shp") ;
FirstlineTractor<-spTransform(FirstlineTractor.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )  ;
plot(FirstlineTractor,add=T);
FirstlineCentroid.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\FirstLineCentroid.shp") ;
FirstlineCentroid<-spTransform(FirstlineCentroid.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )  ;
str(FirstlineCentroid)
plot(FirstlineCentroid, add=T,col="RED");
plot(FirstlineTractor[!is.na(over(FirstlineTractor,geometry(FirstlineCentroid))),])
dim(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords)
(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[21,1]-FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[1,1])/(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[21,2]-FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[1,2])
##### find the slope of the line so new lines can be drawn with the width off the tractor swaths polygons
FirstLineSlope<-(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[21,1]-FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[1,1])/(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[21,2]-FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[1,2])
FirstlineCentroid.xmin<-min(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[,1])
FirstlineCentroid.xmax<-max(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[,1])
FirstlineCentroid.ymin<-min(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[,2])
FirstlineCentroid.ymax<-max(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[,2])
FirstlineCentroid.tips.1<-data.frame(c(FirstlineCentroid.xmax,FirstlineCentroid.xmin), c(FirstlineCentroid.ymin,FirstlineCentroid.ymax)) ;
FirstlineCentroid.tips<-SpatialPointsDataFrame(FirstlineCentroid.tips.1, data=FirstlineCentroid.tips.1, proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
plot(FirstlineCentroid.tips, col=c("RED","BLUE"), add=T)
#### extend the line on the y axis  100 m
FirstlineCentroid.extended.tips.1<-data.frame(c(1512491 + (FirstLineSlope*100), 1512674 - (FirstLineSlope*100)),c(2128633 + 100, 2128271- 100))
FirstlineCentroid.extended.tips<-SpatialPointsDataFrame(FirstlineCentroid.extended.tips.1, data=FirstlineCentroid.extended.tips.1, proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")) ;
plot(FirstlineCentroid.extended.tips, col="MAGENTA", add=T)
# create the extended line
ExtendedLine.1<-FirstlineCentroid.extended.tips@coords  ;
ExtendedLine.2<-Line(ExtendedLine.1);
ExtendedLine.3<-Lines(list(ExtendedLine.2), ID="1") ;
ExtendedLine.4<-SpatialLines(list(ExtendedLine.3),proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
ExtendedLine.5<-SpatialLinesDataFrame(ExtendedLine.4, data=data.frame(ID=c("1"),c(1)))
summary(ExtendedLine.4)
str(ExtendedLine.4)
plot(ExtendedLine.5, col="DARKGREEN", add=T)
writeOGR(ExtendedLine.5,"C:\\Users\\frm10\\Downloads\\Line1.shp",layer="Line1", driver="ESRI Shapefile")
N.ROWS=132  ;
#N.ROW=20  ;
d.m<-2.5723 ;
atan(1/FirstLineSlope)
#### Calculate the translation matrix based on the distance  https://en.wikipedia.org/wiki/Translation_(geometry) https://www.mathworks.com/discovery/affine-transformation.html
Transl.matx<-matrix(c(1,0,d.m*N.ROW*sin(-atan(1/FirstLineSlope)),0,1,(d.m*N.ROW*cos(atan(1/FirstLineSlope))),0,0,1), ncol=3,byrow=T) ;
ExtendedLine.4@lines[[1]]@Lines[[1]]@coords
New.line.1<-Transl.matx %*% t(cbind(ExtendedLine.4@lines[[1]]@Lines[[1]]@coords,c(1,1)))
### Create a new line
New.line.2<-Line(t(New.line.1[1:2,]));
New.line.3<-Lines(list(New.line.2), ID="1") ;
New.line.4<-SpatialLines(list(New.line.3),proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
New.line.5<-SpatialLinesDataFrame(New.line.4, data=data.frame(ID=c("1"),c(1))) ;
summary(New.line.5)
plot(New.line.5, col="RED", add=T)
writeOGR(New.line.5,"C:\\Users\\frm10\\Downloads\\Line1.shp",layer="Line1", driver="ESRI Shapefile")
N.ROWS=132  ;
d.m<-2.5723 ;
atan(1/FirstLineSlope)
Transl.matx<-matrix(c(1,0,d.m*N.ROW*sin(-atan(1/FirstLineSlope)),0,1,(d.m*N.ROW*cos(atan(1/FirstLineSlope))),0,0,1), ncol=3,byrow=T) ;
Transl.matx<-matrix(c(1,0,d.m*N.ROW*sin(-atan(1/FirstLineSlope)),0,1,(d.m*N.ROW*cos(atan(1/FirstLineSlope))),0,0,1), ncol=3,byrow=T) ;
N.ROW=20  ;
Transl.matx<-matrix(c(1,0,d.m*N.ROW*sin(-atan(1/FirstLineSlope)),0,1,(d.m*N.ROW*cos(atan(1/FirstLineSlope))),0,0,1), ncol=3,byrow=T) ;
ExtendedLine.4@lines[[1]]@Lines[[1]]@coords
New.line.1<-Transl.matx %*% t(cbind(ExtendedLine.4@lines[[1]]@Lines[[1]]@coords,c(1,1)))
New.line.2<-Line(t(New.line.1[1:2,]));
New.line.3<-Lines(list(New.line.2), ID="1") ;
New.line.4<-SpatialLines(list(New.line.3),proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
New.line.5<-SpatialLinesDataFrame(New.line.4, data=data.frame(ID=c("1"),c(1))) ;
summary(New.line.5)
plot(New.line.5, col="RED", add=T)
writeOGR(New.line.5,"C:\\Users\\frm10\\Downloads\\Line1.shp",layer="Line1", driver="ESRI Shapefile")
Tractor.Swath.lines.1<-Lines(ExtendedLine.4@lines[[1]]@Lines[[1]], ID=c(1)) ;
for (N.ROW in seq(1,N.ROWS ) ){
#N.ROW=20  ;
Transl.matx<-matrix(c(1,0,d.m*N.ROW*sin(-atan(1/FirstLineSlope)),0,1,(d.m*N.ROW*cos(atan(1/FirstLineSlope))),0,0,1), ncol=3,byrow=T) ;
New.line.1<-Transl.matx %*% t(cbind(ExtendedLine.4@lines[[1]]@Lines[[1]]@coords,c(1,1)))
New.line.2<-Line(t(New.line.1[1:2,]));
Tractor.Swath.lines.1<-append(Tractor.Swath.lines.1, Lines(list(New.line.2), ID=N.ROW+1)) ;
}
Tractor.Swath.lines.2<-SpatialLines(Tractor.Swath.lines.1,proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
Tractor.Swath.lines.3<-SpatialLinesDataFrame(Tractor.Swath.lines.2, data=data.frame(ID=sapply(slot(Tractor.Swath.lines.2,"lines"),function (x) slot(x,"ID")),row.names=sapply(slot(Tractor.Swath.lines.2,"lines"),function (x) as.numeric(slot(x,"ID"))))) ;
plot(Tractor.Swath.lines.3, col="CYAN", add=T)
writeOGR(Tractor.Swath.lines.3,"C:\\Users\\frm10\\Downloads\\Line5.shp",layer="Line5", driver="ESRI Shapefile") ;
Tractor.Swath.lines.4<-crop(Tractor.Swath.lines.3,Boundary.Polygon )  ;
plot(Tractor.Swath.lines.4, col="YELLOW", add=T) ;
SpatialLinesLengths(Tractor.Swath.lines.4)
Tractor.Swath.lines.4@data$Row.Length.m<-SpatialLinesLengths(Tractor.Swath.lines.4) ;
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\RockviewPlotsV3AR7.shp")  ;
PlotsData.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\RockviewPlotsV3AR7.shp")  ;
PlotsData<-spTransform(PlotsData.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(PlotsData, lwd=2, border="CYAN", add=T)
Plants_2_all<-rbind(Plants_2.1,Plants_2.2) ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants0.shp")  ;
Plants_0.1.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants0.shp")  ;
Plants_0.2.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants0.shp")  ;
Plants_0_all.2014<-rbind(Plants_0.1.2014,Plants_0.2.2014) ;
Plants_0_all.2014<-spTransform(Plants_0_all.2014, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
View(Plants_0_all.2014)
View(Plants_0_all.2014@data  )
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants1.shp")  ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants1.shp")  ;
Plants_1.1.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants1.shp")  ;
Plants_1.2.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants1.shp")  ;
Plants_1_all.2014<-rbind(Plants_1.1.2014,Plants_1.2.2014) ;
Plants_1_all.2014<-spTransform(Plants_1_all.2014, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
plot(Plants_1_all.2014, pch=20, col="BLUE", add=T) ;
plot(Plants_0_all.2014, pch=20, col="RED", add=T) ;
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants2.shp")  ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants2.shp")  ;
#### read the shape file
Plants_2.1.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants2.shp")  ;
Plants_2.2.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants2.shp")  ;
#### Aggreate the shape files into one
Plants_2_all.2014<-rbind(Plants_2.1.2014,Plants_2.2.2014) ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
Plants_2_all.2014<-spTransform(Plants_2_all.2014, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
plot(Plants_2_all.2014, pch=20, col="DARKGREEN", add=T) ;
#### Two plants per row
Row.width.ft<-3.0 + 2.5 + 3.0
Row.length.PerTwoplants.ft<-2.0
Row.length.Zeroplants.ft<-7.0
Plant.Density.2.ft2<-Row.width.ft*Row.length.PerTwoplants.ft /2    #ft2/plant
Plant.Density.1.ft2<-Row.width.ft*Row.length.PerTwoplants.ft /1   #ft2/plant
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.0.ft2<-Row.width.ft*Row.length.Zeroplants.ft/1   #ft2/plant Ma
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.2.m2<-Plant.Density.2.ft2 / 10.76391   # m2/plant
Plant.Density.1.m2<-Plant.Density.1.ft2 / 10.76391   # m2/plant
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.0.m2<-Plant.Density.0.ft2 / 10.76391   # m2/plant
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.2.ha<-10000 / Plant.Density.2.m2  # plants/ha
Plant.Density.1.ha<-10000 / Plant.Density.1.m2 # plants/ha
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.0.ha<-10000 / Plant.Density.0.m2 # plants/ha
############################################### Think about the lower bound for 0 plants ###################################
##############  Adding the information about plant density to the plant population estimates shape files
str(Plants_0_2013@data)
View(Plants_0_2013@data)
Plants_0_2013@data$PlantDensity<-Plant.Density.0.ha  ;
Plants_1_2013@data$PlantDensity<-Plant.Density.1.ha   ;
Plants_2_2013@data$PlantDensity<-Plant.Density.2.ha   ;
#### Aggreate the 2013 shape files into one
Plants.2013<-rbind(Plants_0_2013,Plants_1_2013,Plants_2_2013) ;
View(Plants.2013@data)
##############################################################################################################
#
#
# Program to manage and analyze willow harvest research data
#
#
#
#
#  Felipe Montes 2020/02/19
#
#
#
#
###############################################################################################################
###############################################################################################################
#                             Tell the program where the package libraries are stored
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###############################################################################################################
#                             Setting up working directory  Loading Packages and Setting up working directory
###############################################################################################################
#      set the working directory
#readClipboard()
setwd("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowHarvestPaper\\WillowHarvest") ;   #
###############################################################################################################
#                            Install the packages that are needed
###############################################################################################################
# Install the packages that are needed #
#install.packages('fields', dep=T)
#install.packages('LatticeKrig', dep=T)
#install.packages('rgeos', dep=T)
###############################################################################################################
#                           load the libraries that are neded
###############################################################################################################
library(rgdal) ;
library(soilDB) ;
library(aqp) ;
library(sp) ;
library(raster) ;
library(openxlsx);
library(fields);
library(LatticeKrig)
library(rgeos)
###############################################################################################################
#                           load willow harvest data from 2015
###############################################################################################################
#readClipboard()
Harvest2015<-read.xlsx("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowRockViewData\\Yield Data\\RockviewWillowHarvest_chips20160222 (1).xlsx", sheet= "PivotTable", startRow = 1 ,colNames = T , cols= c(seq(1,9)), rows=c(seq(1,133)) );
#View(Harvest2015)
#str(Harvest2015)
names(Harvest2015)
#### convert the row and the variety data to factors
Harvest2015$Factor.Row<-as.factor(Harvest2015$`Actual.Row.#`) ;
#levels(Harvest2015$Factor.Row)
Harvest2015$Cultivar<-as.factor(Harvest2015$Variety) ;
#levels(Harvest2015$Cultivar)
###############################################################################################################
#                           load willow harvest data from 2019
###############################################################################################################
#readClipboard()
Harvest2019<-read.xlsx("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowRockViewData\\Wilow Harvest 2019\\RockviewWillowHarvest2019V2.xlsx", sheet= "Yield", startRow = 2 ,colNames = T , cols= c(seq(1,10)), rows=c(seq(1,134)) );
#View(Harvest2019)
#str(Harvest2015)
names(Harvest2019)
#### convert the row and the variety data to factors
Harvest2019$Factor.Row<-as.factor(Harvest2019$Row) ;
#levels(Harvest2019$Factor.Row)
Harvest2019$Cultivar<-as.factor(Harvest2019$Variety) ;
#levels(Harvest2019$Cultivar)
###############################################################################################################
#                           load Willow field GIS Maps
###############################################################################################################
#################    Tractor GPS Coverage Maps ######################
########### Read infor mation about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\BrianGISFile Tractor\\Coverage.shp")  ;
#### read the shape file
TractorGPS.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\BrianGISFile Tractor\\Coverage.shp")  ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
TractorGPS<-spTransform(TractorGPS.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(TractorGPS)
#################   Extract rows based on the tractor gps files and boundary files recorded with the GPS ######################
Boundary.Polygon.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Boundary_Track_2014-04-11 09_00_54_Polygon.shp") ;
Boundary.Polygon<-spTransform(Boundary.Polygon.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(Boundary.Polygon, add=T,col="RED")
##### read the tractor lines that are inside the boundary
Tractor.Inside.Boundary.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\TractorCoverageinsideBoudaryTrack.shp") ;
Tractor.Inside.Boundary<-spTransform(Tractor.Inside.Boundary.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )  ;
plot(Tractor.Inside.Boundary, add=T,col="BLUE");
##### Select the first line and the middle of the line by using the centroids of the tractor polygons
FirstlineTractor.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\FirstLineTractorCoverage.shp") ;
FirstlineTractor<-spTransform(FirstlineTractor.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )  ;
plot(FirstlineTractor,add=T);
FirstlineCentroid.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\FirstLineCentroid.shp") ;
FirstlineCentroid<-spTransform(FirstlineCentroid.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )  ;
str(FirstlineCentroid)
plot(FirstlineCentroid, add=T,col="RED");
plot(FirstlineTractor[!is.na(over(FirstlineTractor,geometry(FirstlineCentroid))),])
dim(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords)
(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[21,1]-FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[1,1])/(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[21,2]-FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[1,2])
##### find the slope of the line so new lines can be drawn with the width off the tractor swaths polygons
FirstLineSlope<-(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[21,1]-FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[1,1])/(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[21,2]-FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[1,2])
FirstlineCentroid.xmin<-min(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[,1])
FirstlineCentroid.xmax<-max(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[,1])
FirstlineCentroid.ymin<-min(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[,2])
FirstlineCentroid.ymax<-max(FirstlineCentroid@lines[[1]]@Lines[[1]]@coords[,2])
FirstlineCentroid.tips.1<-data.frame(c(FirstlineCentroid.xmax,FirstlineCentroid.xmin), c(FirstlineCentroid.ymin,FirstlineCentroid.ymax)) ;
FirstlineCentroid.tips<-SpatialPointsDataFrame(FirstlineCentroid.tips.1, data=FirstlineCentroid.tips.1, proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"))
####### Extend the FirstlineCentroid by 100 m up and down ######
plot(FirstlineCentroid.tips, col=c("RED","BLUE"), add=T)
#### extend the line on the y axis  100 m
FirstlineCentroid.extended.tips.1<-data.frame(c(1512491 + (FirstLineSlope*100), 1512674 - (FirstLineSlope*100)),c(2128633 + 100, 2128271- 100))
FirstlineCentroid.extended.tips<-SpatialPointsDataFrame(FirstlineCentroid.extended.tips.1, data=FirstlineCentroid.extended.tips.1, proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")) ;
plot(FirstlineCentroid.extended.tips, col="MAGENTA", add=T)
# create the extended line
ExtendedLine.1<-FirstlineCentroid.extended.tips@coords  ;
ExtendedLine.2<-Line(ExtendedLine.1);
ExtendedLine.3<-Lines(list(ExtendedLine.2), ID="1") ;
ExtendedLine.4<-SpatialLines(list(ExtendedLine.3),proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
ExtendedLine.5<-SpatialLinesDataFrame(ExtendedLine.4, data=data.frame(ID=c("1"),c(1)))
summary(ExtendedLine.4)
str(ExtendedLine.4)
plot(ExtendedLine.5, col="DARKGREEN", add=T)
writeOGR(ExtendedLine.5,"C:\\Users\\frm10\\Downloads\\Line1.shp",layer="Line1", driver="ESRI Shapefile")
####### move the line in paralell the distance onf one tractor
#### Calculate the with of the tractor swaths
# i=8
# j=3
# k=4
#
# plot(TractorGPS@polygons[[i]]@Polygons[[1]]@coords)
# dim(TractorGPS@polygons[[i]]@Polygons[[1]]@coords)
# text(TractorGPS@polygons[[i]]@Polygons[[1]]@coords,labels=seq(1,dim(TractorGPS@polygons[[i]]@Polygons[[1]]@coords)[1]))
#
# sqrt((TractorGPS@polygons[[i]]@Polygons[[1]]@coords[j,1]-TractorGPS@polygons[[i]]@Polygons[[1]]@coords[k,1])^2+(TractorGPS@polygons[[i]]@Polygons[[1]]@coords[j,2]-TractorGPS@polygons[[i]]@Polygons[[1]]@coords[k,2])^2)
# ######################################################
#
#           average distance between tractor swaths
#
#                         d.m=2.5723
#
#
# #####################################################
N.ROWS=132  ;
#N.ROW=20  ;
d.m<-2.5723 ;
atan(1/FirstLineSlope)
#### Calculate the translation matrix based on the distance  https://en.wikipedia.org/wiki/Translation_(geometry) https://www.mathworks.com/discovery/affine-transformation.html
Transl.matx<-matrix(c(1,0,d.m*N.ROW*sin(-atan(1/FirstLineSlope)),0,1,(d.m*N.ROW*cos(atan(1/FirstLineSlope))),0,0,1), ncol=3,byrow=T) ;
ExtendedLine.4@lines[[1]]@Lines[[1]]@coords
New.line.1<-Transl.matx %*% t(cbind(ExtendedLine.4@lines[[1]]@Lines[[1]]@coords,c(1,1)))
### Create a new line
New.line.2<-Line(t(New.line.1[1:2,]));
New.line.3<-Lines(list(New.line.2), ID="1") ;
New.line.4<-SpatialLines(list(New.line.3),proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
New.line.5<-SpatialLinesDataFrame(New.line.4, data=data.frame(ID=c("1"),c(1))) ;
summary(New.line.5)
plot(New.line.5, col="RED", add=T)
writeOGR(New.line.5,"C:\\Users\\frm10\\Downloads\\Line1.shp",layer="Line1", driver="ESRI Shapefile")
##### Create all the lines
#initiallize the SpatialLines object
Tractor.Swath.lines.1<-Lines(ExtendedLine.4@lines[[1]]@Lines[[1]], ID=c(1)) ;
for (N.ROW in seq(1,N.ROWS ) ){
#N.ROW=20  ;
Transl.matx<-matrix(c(1,0,d.m*N.ROW*sin(-atan(1/FirstLineSlope)),0,1,(d.m*N.ROW*cos(atan(1/FirstLineSlope))),0,0,1), ncol=3,byrow=T) ;
New.line.1<-Transl.matx %*% t(cbind(ExtendedLine.4@lines[[1]]@Lines[[1]]@coords,c(1,1)))
New.line.2<-Line(t(New.line.1[1:2,]));
Tractor.Swath.lines.1<-append(Tractor.Swath.lines.1, Lines(list(New.line.2), ID=N.ROW+1)) ;
}
Tractor.Swath.lines.2<-SpatialLines(Tractor.Swath.lines.1,proj4string= CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
Tractor.Swath.lines.3<-SpatialLinesDataFrame(Tractor.Swath.lines.2, data=data.frame(ID=sapply(slot(Tractor.Swath.lines.2,"lines"),function (x) slot(x,"ID")),row.names=sapply(slot(Tractor.Swath.lines.2,"lines"),function (x) as.numeric(slot(x,"ID"))))) ;
plot(Tractor.Swath.lines.3, col="CYAN", add=T)
writeOGR(Tractor.Swath.lines.3,"C:\\Users\\frm10\\Downloads\\Line5.shp",layer="Line5", driver="ESRI Shapefile") ;
############### Clip the extended tractor swath lines and obtain the length of each one ###
Tractor.Swath.lines.4<-crop(Tractor.Swath.lines.3,Boundary.Polygon )  ;
plot(Tractor.Swath.lines.4, col="YELLOW", add=T) ;
SpatialLinesLengths(Tractor.Swath.lines.4)
Tractor.Swath.lines.4@data$Row.Length.m<-SpatialLinesLengths(Tractor.Swath.lines.4) ;
#################    Plots  and varieties  ######################
########### Read infor mation about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\RockviewPlotsV3AR7.shp")  ;
#### read the shape file
PlotsData.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\RockviewPlotsV3AR7.shp")  ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
PlotsData<-spTransform(PlotsData.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(PlotsData, lwd=2, border="CYAN", add=T)
#################          Plant population estimates  based on the 0 ,1 ,2 survey system              ######################
