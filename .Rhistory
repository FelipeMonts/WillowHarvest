# filenames[1:5]
#
# ## download to a local directory:
# ORC.name <- filenames[grep(filenames, pattern=glob2rx("ORCDRC_M_sl1_250m_ll.tif$"))]
# ORC.name
# try(download.file(paste(sg.ftp, ORC.name, sep=""), ORC.name))
# ## 2.8GB Geotiff!!
#
# ## check that everything is OK:
# GDALinfo(ORC.name)
#
# ## We focus on Ghana
# wg.url <- url("http://gsif.isric.org/lib/exe/fetch.php?media=admin.af.rda")
# load(wg.url)
# proj4string(admin.af) <- "+proj=longlat +datum=WGS84"
# country.af <- as(admin.af, "SpatialLines")
# ## Ghana bounding box:
# ghana <- admin.af[admin.af$FORMAL_EN=="Republic of Ghana",]
# ghana@bbox
#
# ## load soil Africa Soil Profile DB:
# data(afsp)
# sites <- afsp$sites
# coordinates(sites) <- ~ LONWGS84 + LATWGS84
# proj4string(sites) <- "+proj=longlat +datum=WGS84"
# #af.csy = "+proj=laea +lat_0=5 +lon_0=20 +x_0=0 +y_0=0 +units=m +ellps=WGS84 +datum=WGS84"
# #sites.af <- spTransform(sites, CRS(af.csy))
#
# ## plot country and profiles
# plot(ghana, col="red", lwd=2, asp=1)
# lines(country.af)
# points(sites, pch="+")
# ## in local projection system:
# #ghana.xy <- spTransform(ghana, CRS(af.csy))
# #ghana.xy@bbox
#
# ## get only Ghana:
# te = as.vector(ghana@bbox)
# unlink("ORC_sl1_Ghana.tif")
# system(paste0(gdalwarp, ' ', ORC.name, ' ORC_sl1_Ghana.tif -te ', paste(te, collapse=" ")))
# ORCDRC_sl1_ghana <- readGDAL("ORC_sl1_Ghana.tif")
# plot(log1p(raster(ORCDRC_sl1_ghana)), col=SAGA_pal[[1]])
#### This Seems the most efficient way to extract the soils from Kyrgyzstan #######
## (b) Web Coverage Service
## location of service:
# wcs = "http://webservices.isric.org/geoserver/wcs?"
# ## create an XML file:
# l1 <- newXMLNode("WCS_GDAL")
# l1.s <- newXMLNode("ServiceURL", wcs, parent=l1)
# l1.l <- newXMLNode("CoverageName", "orcdrc_m_sl1_250m", parent=l1)
# l1
# xml.out = "ORCDRC_M_sl1.xml"
# saveXML(l1, file=xml.out)
# ## check if the layer exists:
# system(paste(gdalinfo, xml.out))
## Alternative: calculate offset and region dims:
###### Get the bounding box region for Kyrgyzstan and then get the raster files for this sections######
ContryPolygonInfo<-ogrInfo("C:/Felipe/PIHM-CYCLES/PIHM/Soils/ISRICWorldSoils/KyrgyzstanPolygonWGS84.shp") ;
raster(system.file("https://files.isric.org/soilgrids/data/recent/ACDWRB_M_ss_250m_ll.tif", package="raster"))
raster(system.file("external/test.grd", package="raster"))
system.file("https://files.isric.org/soilgrids/data/recent/ACDWRB_M_ss_250m_ll.tif")
Bounding.box
ContryPolygonInfo<-ogrInfo("C:/Felipe/PIHM-CYCLES/PIHM/Soils/ISRICWorldSoils/KyrgyzstanPolygonWGS84.shp") ;
Bounding.box<-ContryPolygonInfo$extent;
Bounding.box
install.packages("jsonlite")
require(jsonlite)
coords <- c(45.5, 37.8)
fromJSON(paste0('https://rest.soilgrids.org/query?lon=',coords[1],'&lat=',coords[2],',&attributes=BLDFIE,SLTPPT,SNDPPT,CLYPPT'), flatten = TRUE)
install.packages(c("stringr", "XLConnect"))
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages("randomForest")
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
ind
View(iris)
View(iris)
nrow(iris)
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
library(randomForest)
data(iris)
set.seed(111)
ind <- sample(2, nrow(iris), replace = TRUE, prob=c(0.8, 0.2))
iris.rf <- randomForest(Species ~ ., data=iris[ind == 1,])
iris.pred <- predict(iris.rf, iris[ind == 2,])
iris[ind == 2,]
iris.pred
iris[ind == 1,]
iris.pred
View(iris)
View(iris)
table(observed = iris[ind==2, "Species"], predicted = iris.pred)
install.packages("rgdal")
install.packages("raster")
install.packages("shapefiles")
WindowsDirectory<-"C:\Users\frm10\Downloads\doi_10.5061_dryad.dp8dr44__v1\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx"
WindowsDirectory<-'"C:\Users\frm10\Downloads\doi_10.5061_dryad.dp8dr44__v1\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx"'
WindowsDirectory<-c("C:\Users\frm10\Downloads\doi_10.5061_dryad.dp8dr44__v1\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx")
readClipboard()
readClipboard()
library(openxlsx)
library(openxlsx)
read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Standard Data')
Standards.Data<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Standard Data') ;
str(Standards.Data)
Standards.Data<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Standard Data', as.is=T) ;
Standards.Data$`Pipette-CLAY`<-as.numeric(Standards.Data$`Pipette-CLAY`)
str(Standards.Data)
View(Standards.Data)
Standards.Data[15,]
Standards.Data$`Pipette-SILT`<-as.numeric(Standards.Data$`Pipette-SILT`)
Standards.Data$`Pipette-SAND`-as.numeric(Standards.Data$`Pipette-SAND`)
str(Standards.Data)
Standards.Data$`Pipette-SAND`<-as.numeric(Standards.Data$`Pipette-SAND`)
str(Standards.Data)
View(Standards.Data)
plot(Standards.Data$`Pipette-CLAY`,Standards.Data$`Hydrometer-CLAY`, col="RED")
plot(Standards.Data$`Pipette-SAND`,Standards.Data$`Hydrometer-SAND`, col="BLUE", add=T)
plot(Standards.Data$`Pipette-CLAY`,Standards.Data$`Hydrometer-CLAY`, col="RED")
points(Standards.Data$`Pipette-SAND`,Standards.Data$`Hydrometer-SAND`, col="BLUE")
points(Standards.Data$`Pipette-SAND`,Standards.Data$`Hydrometer-SAND`, col="BLUE")
plot(Standards.Data$`Pipette-CLAY`,Standards.Data$`Hydrometer-CLAY`, col="RED")
points(Standards.Data$`Pipette-SAND`,Standards.Data$`Hydrometer-SAND`, col="BLUE")
plot(Standards.Data$`Pipette-SAND`,Standards.Data$`Hydrometer-SAND`, col="BLUE")
Standards.Data$`Hydrometer-SAND`
plot(Standards.Data$`Pipette-CLAY`,Standards.Data$`Hydrometer-CLAY`, col="RED")
points(Standards.Data$`Pipette-SILT`,Standards.Data$`Hydrometer-.SAND`, col="BLUE")
plot(Standards.Data$`Pipette-CLAY`,Standards.Data$`Hydrometer-CLAY`, col="RED", ylim=c(0,1), xlim=c(0,1))
points(Standards.Data$`Pipette-SILT`,Standards.Data$`Hydrometer-.SAND`, col="BLUE")
plot(Standards.Data$`Pipette-CLAY`,Standards.Data$`Hydrometer-CLAY`, col="RED", ylim=c(0,1), xlim=c(0,1))
points(Standards.Data$`Pipette-SILT`,Standards.Data$`Hydrometer-SILT`, col="BLUE")
points(Standards.Data$`Pipette-SAND`,Standards.Data$`Hydrometer-.SAND`, col="GREEN")
SandContent<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Sand Content') ;
str(SandContent)
t(SandContent)
t(SandContent)[,2]
as.numeric(t(SandContent)[,2])
points(as.numeric(t(SandContent)[,2]),Standards.Data$`Hydrometer-.SAND`, col="MAGENTA")
t(SandContent)
LDASand<-data.frame(t(SandContent)[,1],as.numeric(SandContent)[,2], as.numeric(SandContent)[,3])
t(SandContent)[,1]
str(t(SandContent))
str(SandContent)
SandContent[1]
SandContent[1,]
SandContent<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Sand Content', headder=F) ;
SandContent<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Sand Content', colNames=F, rowNames=F) ;
str(SandContent)
LDASand<-data.frame(as.numeric(SandContent)[,2], as.numeric(SandContent)[,3])
SandContent[,2]
SandContent[2,]
as.numeric(SandContent[2,])
as.numeric(SandContent[3,])
LDASand<-data.frame(as.numeric(SandContent[2,]), as.numeric(SandContent[3,]))
names(LDASand)<-SandContent[1,]
SandContent[1,]
names(LDASand)<-SandContent[1,2:55]
str(LDASand)
SandContent[1,]
SandContent[,1]
SandContent[2:3,1]
names(LDASand)<-SandContent[2:3,1]
SandContent[1,]
SandContent[1,2:55]
LDASand$Sample<-SandContent[1,2:55]
str(SandContent)
SandContent[1,]
str(LDASand)
LDASand$Sample<-SandContent[1,]
SandContent[1,]
str(SandContent[1,])
unlist(SandContent[1,])
LDASand$Sample<-unlist(SandContent[1,])
str(LDASand)
str(Standards.Data)
merge(Standards.Data,LDASand,,by='Sample')
Standards.and.sand<-merge(Standards.Data,LDASand,,by='Sample');
plot(Standards.and.sand$`Pipette-CLAY`,Standards.and.sand$`Hydrometer-CLAY`, col="RED", ylim=c(0,1), xlim=c(0,1))
points(Standards.and.sand$`Pipette-SILT`,Standards.and.sand$`Hydrometer-SILT`, col="BLUE")
points(Standards.and.sand$`Pipette-SAND`,Standards.and.sand$`Hydrometer-.SAND`, col="GREEN")
points(Standards.and.sand$`Pipette-SAND`,Standards.and.sand$`Sand Content (%)`100, col="MAGENTA")
points(Standards.and.sand$`Pipette-SAND`,Standards.and.sand$`Sand Content (%)`/100, col="MAGENTA")
read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Laser Diffraction-Sieving Data', colNames=T, rowNames=T)
Laser.Diffraction.Sieving.Data<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Laser Diffraction-Sieving Data', colNames=T, rowNames=T) ;
Table1<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Table 1 ', colNames=T, rowNames=F) ;
Table1<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Table 1', colNames=T, rowNames=F) ;
Table1<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Table 1', colNames=T, rowNames=F) ;
Table1<-read.xlsx("C:\\Users\\frm10\\Downloads\\doi_10.5061_dryad.dp8dr44__v1\\DataSSSAJ_doi_10.2136_sssaj2018.10.0385.xlsx", sheet='Table 1', colNames=T, rowNames=F) ;
str(Table1)
Table1$`Pipette-SAND`<-as.numeric(Table1$`Pipette-SAND`)/100
Table1$`Pipette-SILT`<-as.numeric(Table1$`Pipette-SILT`)/100
Table1$`Pipette-CLAY`<-as.numeric(Table1$`Pipette-CLAY`)/100
points(Standards.and.sand$`Pipette-CLAY`,Table1$`Pipette-SAND`, col="RED", ylim=c(0,1), xlim=c(0,1))
All.Data<-merge(Standards.and.sand, Table1, by='Sample');
points(All.Data$`Pipette-SAND.x`,All.Data$`Pipette-SAND.y`, pch='*' ,col="RED", ylim=c(0,1), xlim=c(0,1))
plot(Standards.and.sand$`Pipette-CLAY`,Standards.and.sand$`Hydrometer-CLAY`, col="RED", ylim=c(0,1), xlim=c(0,1))
points(Standards.and.sand$`Pipette-SILT`,Standards.and.sand$`Hydrometer-SILT`, col="BLUE")
points(Standards.and.sand$`Pipette-SAND`,Standards.and.sand$`Hydrometer-.SAND`, col="GREEN")
points(Standards.and.sand$`Pipette-SAND`,Standards.and.sand$`Sand Content (%)`/100, col="MAGENTA")
points(All.Data$`Pipette-CLAY.x`,All.Data$`Pipette-CLAY.y`, pch='3' ,col="RED", ylim=c(0,1), xlim=c(0,1))
points(All.Data$`Pipette-SAND.x`,All.Data$`Pipette-SAND.y`, pch='3' ,col="GREEN", ylim=c(0,1), xlim=c(0,1))
points(All.Data$`Pipette-SILT.x`,All.Data$`Pipette-SILT.y`, pch='3' ,col="BLUE", ylim=c(0,1), xlim=c(0,1))
plot(Standards.and.sand$`Pipette-CLAY`,Standards.and.sand$`Hydrometer-CLAY`, col="RED", ylim=c(0,1), xlim=c(0,1))
points(Standards.and.sand$`Pipette-SILT`,Standards.and.sand$`Hydrometer-SILT`, col="BLUE")
points(Standards.and.sand$`Pipette-SAND`,Standards.and.sand$`Hydrometer-.SAND`, col="GREEN")
points(Standards.and.sand$`Pipette-SAND`,Standards.and.sand$`Sand Content (%)`/100, col="MAGENTA")
abline(a=0,b=1,col="CYAN")
abline(a=0,b=1,col="BLACK")
plot(All.Data$`Pipette-CLAY.x`,All.Data$`Pipette-CLAY.y`, pch=3 ,col="RED", ylim=c(0,1), xlim=c(0,1))
points(All.Data$`Pipette-SAND.x`,All.Data$`Pipette-SAND.y`, pch=3 ,col="GREEN", ylim=c(0,1), xlim=c(0,1))
points(All.Data$`Pipette-SILT.x`,All.Data$`Pipette-SILT.y`, pch=3 ,col="BLUE", ylim=c(0,1), xlim=c(0,1))
abline(a=0,b=1,col="BLACK")
plot(All.Data$`Pipette-CLAY.x`,All.Data$`Pipette-CLAY.x`-All.Data$`Pipette-CLAY.y`, pch=3 ,col="RED"))
plot(All.Data$`Pipette-CLAY.x`,All.Data$`Pipette-CLAY.x`-All.Data$`Pipette-CLAY.y`, pch=3 ,col="RED")
plot(All.Data$`Pipette-CLAY.x`,All.Data$`Pipette-CLAY.x`-All.Data$`Pipette-CLAY.y`, pch=3 ,col="RED",xlim=c(0,1))
points(All.Data$`Pipette-SAND.x`,All.Data$`Pipette-SAND.x` - All.Data$`Pipette-SAND.y`, pch=3 ,col="GREEN", ylim=c(0,1), xlim=c(0,1))
points(All.Data$`Pipette-SILT.x`,All.Data$`Pipette-SILT.x` - All.Data$`Pipette-SILT.y`, pch=3 ,col="BLUE", ylim=c(0,1), xlim=c(0,1))
View(All.Data)
toy
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RVenn', 'Rtools', dependencies = T)
library(purrr)
library(RVenn)
library(ggplot2)
set.seed(42)
toy = map(sample(5:25, replace = TRUE, size = 10), function(x) sample(letters, size = x))
toy[1:3]
str(toy)
toy = Venn(toy)
library(RVenn)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RVenn', 'Rtools', dependencies = T)
library(RVenn)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RVenn', 'Rtools', dependencies = T)
install.packages("Rtools")
install.packages('RVenn', 'Rtools', dependencies = T)
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
install.packages('RVenn', dependencies = T)
library(purrr)
library(RVenn)
library(ggplot2)
set.seed(42)
toy = map(sample(5:25, replace = TRUE, size = 10), function(x) sample(letters, size = x))
toy[1:3]
str(toy)
toy = Venn(toy)
library(RVenn)
install.packages('RVenn', dependencies = T)
library(RVenn)
##############################################################################################################
#
#
# Program to manage and analyze willow harvest research data
#
#
#
#
#  Felipe Montes 2020/02/19
#
#
#
#
###############################################################################################################
###############################################################################################################
#                             Tell the program where the package libraries are stored
###############################################################################################################
#  Tell the program where the package libraries are  #####################
.libPaths("C:/Felipe/SotwareANDCoding/R_Library/library")  ;
###############################################################################################################
#                             Setting up working directory  Loading Packages and Setting up working directory
###############################################################################################################
#      set the working directory
#readClipboard()
setwd("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowHarvestPaper\\WillowHarvest") ;   #
###############################################################################################################
#                            Install the packages that are needed
###############################################################################################################
# Install the packages that are needed #
#install.packages('fields', dep=T)
#install.packages('LatticeKrig', dep=T)
###############################################################################################################
#                           load the libraries that are neded
###############################################################################################################
library(rgdal) ;
library(soilDB) ;
library(aqp) ;
library(sp) ;
library(raster) ;
library(openxlsx);
library(fields);
library(LatticeKrig)
###############################################################################################################
#                           load willow harvest data from 2015
###############################################################################################################
#readClipboard()
Harvest2015<-read.xlsx("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowRockViewData\\Yield Data\\RockviewWillowHarvest_chips20160222 (1).xlsx", sheet= "PivotTable", startRow = 1 ,colNames = T , cols= c(seq(1,9)), rows=c(seq(1,133)) );
#View(Harvest2015)
#str(Harvest2015)
names(Harvest2015)
#### convert the row and the variety data to factors
Harvest2015$Factor.Row<-as.factor(Harvest2015$`Actual.Row.#`) ;
#levels(Harvest2015$Factor.Row)
Harvest2015$Cultivar<-as.factor(Harvest2015$Variety) ;
#levels(Harvest2015$Cultivar)
###############################################################################################################
#                           load willow harvest data from 2019
###############################################################################################################
#readClipboard()
Harvest2019<-read.xlsx("C:\\Felipe\\Willow_Project\\Willow_Experiments\\Willow_Rockview\\WillowRockViewData\\Wilow Harvest 2019\\RockviewWillowHarvest2019V2.xlsx", sheet= "Yield", startRow = 2 ,colNames = T , cols= c(seq(1,10)), rows=c(seq(1,134)) );
#View(Harvest2019)
#str(Harvest2015)
names(Harvest2019)
#### convert the row and the variety data to factors
Harvest2019$Factor.Row<-as.factor(Harvest2019$Row) ;
#levels(Harvest2019$Factor.Row)
Harvest2019$Cultivar<-as.factor(Harvest2019$Variety) ;
#levels(Harvest2019$Cultivar)
###############################################################################################################
#                           load Willow field GIS Maps
###############################################################################################################
#################    Tractor GPS Coverage Maps ######################
########### Read infor mation about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\BrianGISFile Tractor\\Coverage.shp")  ;
#### read the shape file
TractorGPS.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\BrianGISFile Tractor\\Coverage.shp")  ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
TractorGPS<-spTransform(TractorGPS.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(TractorGPS)
#################    Plots  and varieties  ######################
########### Read infor mation about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\RockviewPlotsV3AR7.shp")  ;
#### read the shape file
PlotsData.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\RockviewPlotsV3AR7.shp")  ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
PlotsData<-spTransform(PlotsData.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(PlotsData, lwd=2, border="CYAN", add=T)
#################          Plant population estimates  based on the 0 ,1 ,2 survey system              ######################
#########################            Plants_0 2013                          ###########################
########### Read information about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_0.shp")  ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_part2_0.shp")  ;
#### read the shape files
Plants_0.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_0.shp")  ;
Plants_0.2<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_part2_0.shp")  ;
#### Aggreate the sape files into one
Plants_0_all<-rbind(Plants_0.1,Plants_0.2) ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
Plants_0_2013<-spTransform(Plants_0_all, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
plot(Plants_0_2013, pch=20, col="RED", add=T) ;
#########################            Plants_1 2013                        ###########################
########### Readinfor mation about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_1.shp")  ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_part2_1.shp")  ;
#### read the shape file
Plants_1.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_1.shp")  ;
Plants_1.2<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_part2_1.shp")  ;
#### Aggreate the sape files into one
Plants_1_all<-rbind(Plants_1.1,Plants_1.2) ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
Plants_1_2013<-spTransform(Plants_1_all, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
plot(Plants_1_2013, pch=20, col="BLUE", add=T) ;
#########################            Plants_2 2013                        ###########################
########### Read information about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_2.shp")  ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_part2_2.shp")  ;
#### read the shape file
Plants_2.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_2.shp")  ;
Plants_2.2<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\Plants_part2_2.shp")  ;
#### Aggreate the shape files into one
Plants_2_all<-rbind(Plants_2.1,Plants_2.2) ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
Plants_2_2013<-spTransform(Plants_2_all, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
plot(Plants_2_2013, pch=20, col="DARKGREEN", add=T) ;
#########################            Plants_0 2014                        ###########################
########### Read information about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants0.shp")  ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants0.shp")  ;
#### read the shape file
Plants_0.1.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants0.shp")  ;
Plants_0.2.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants0.shp")  ;
#### Aggreate the shape files into one
Plants_0_all.2014<-rbind(Plants_0.1.2014,Plants_0.2.2014) ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
Plants_0_all.2014<-spTransform(Plants_0_all.2014, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
plot(Plants_0_all.2014, pch=20, col="RED", add=T) ;
#########################            Plants_1 2014                        ###########################
########### Read information about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants1.shp")  ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants1.shp")  ;
#### read the shape file
Plants_1.1.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants1.shp")  ;
Plants_1.2.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants1.shp")  ;
#### Aggreate the shape files into one
Plants_1_all.2014<-rbind(Plants_1.1.2014,Plants_1.2.2014) ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
Plants_1_all.2014<-spTransform(Plants_1_all.2014, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
plot(Plants_1_all.2014, pch=20, col="BLUE", add=T) ;
#########################            Plants_2 2014                        ###########################
########### Read information about the shape files ###########
#readClipboard()
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants2.shp")  ;
ogrInfo("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants2.shp")  ;
#### read the shape file
Plants_2.1.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-09.10.11-plants2.shp")  ;
Plants_2.2.2014<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Final.data_2014-04-10_plants2.shp")  ;
#### Aggreate the shape files into one
Plants_2_all.2014<-rbind(Plants_2.1.2014,Plants_2.2.2014) ;
#### Change the projection to EPSG:5070 - NAD83 / Conus Albers - Projected
Plants_2_all.2014<-spTransform(Plants_2_all.2014, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") ) ;
plot(Plants_2_all.2014, pch=20, col="DARKGREEN", add=T) ;
#################   Conversion of the Plant population estimates  based on the 0 ,1 ,2 survey system to plants/m2             ######################
#
#
# Based on the diagram of the planting C:\Felipe\Willow_Project\Drawings and Pictures\Final Drawings\Cutting Spacing Rockview20120502.tif
#
#
##################                            #################                                   #################
#### Two plants per row
Row.width.ft<-3.0 + 2.5 + 3.0
Row.length.PerTwoplants.ft<-2.0
Row.length.Zeroplants.ft<-7.0
Plant.Density.2.ft2<-Row.width.ft*Row.length.PerTwoplants.ft /2    #ft2/plant
Plant.Density.1.ft2<-Row.width.ft*Row.length.PerTwoplants.ft /1   #ft2/plant
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.0.ft2<-Row.width.ft*Row.length.Zeroplants.ft/1   #ft2/plant Ma
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.2.m2<-Plant.Density.2.ft2 / 10.76391   # m2/plant
Plant.Density.1.m2<-Plant.Density.1.ft2 / 10.76391   # m2/plant
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.0.m2<-Plant.Density.0.ft2 / 10.76391   # m2/plant
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.2.ha<-10000 / Plant.Density.2.m2  # plants/ha
Plant.Density.1.ha<-10000 / Plant.Density.1.m2 # plants/ha
############################################### Think about the lower bound for 0 plants ###################################
Plant.Density.0.ha<-10000 / Plant.Density.0.m2 # plants/ha
############################################### Think about the lower bound for 0 plants ###################################
##############  Addin the information about plant density to the plaqnt population estimates shape files
str(Plants_0_2013@data)
View(Plants_0_2013@data)
Plants_0_2013@data$PlantDensity<-Plant.Density.0.ha  ;
Plants_1_2013@data$PlantDensity<-Plant.Density.1.ha   ;
Plants_2_2013@data$PlantDensity<-Plant.Density.2.ha   ;
#### Aggreate the 2013 shape files into one
Plants.2013<-rbind(Plants_0_2013,Plants_1_2013,Plants_2_2013) ;
View(Plants.2013@data)
Plants_0_all.2014@data$PlantDensity<-Plant.Density.0.ha  ;
Plants_1_all.2014@data$PlantDensity<-Plant.Density.1.ha  ;
Plants_2_all.2014@data$PlantDensity<-Plant.Density.2.ha   ;
#### Aggreate the 2014 shape files into one
Plants.2014<-rbind(Plants_0_all.2014,Plants_1_all.2014,Plants_2_all.2014) ;
View(Plants.2014)
####### Using the fields package to do krigging on the plant data
Plants.2013@coords
quilt.plot(Plants.2013@coords,Plants.2013@data$PlantDensity ) ;
str(Plants.2013@data$cmt)
hist(as.numeric(Plants.2013@data$cmt))
quilt.plot(Plants.2013@coords,Plants.2013@data$cmt ) ;
#### Plants.2013.sp<-spatialProcess(Plants.2013@coords,Plants.2013@data$PlantDensity); ### spatialProcess doeas not converge in pc time
#### Another methods needs to be tested
### The Thin plate smoothing Tps works, therefore that is what will be used
Plants.2013.Tps.V1<-Tps(Plants.2013@coords,Plants.2013@data$PlantDensity);
Plants.2013.Tps.V2<-Tps(Plants.2013@coords,as.numeric(Plants.2013@data$cmt));
str(as.numeric(Plants.2013@data$cmt))
str(Plants.2013@coords)
max(Plants.2013@data$PlantDensity)
###### Coordinates grid to prepare image and raster
Range.in.x<-max(Plants.2013@coords[,1]) - min(Plants.2013@coords[,1]) ;
Range.in.y<-max(Plants.2013@coords[,2]) - min(Plants.2013@coords[,2]) ;
x.coords<-seq(min(Plants.2013@coords[,1]),max(Plants.2013@coords[,1]),1) ;
y.coords<-seq(min(Plants.2013@coords[,2]),max(Plants.2013@coords[,2]),1) ;
Rock.View.grid<-list(x.coords,y.coords) ;
names(Rock.View.grid)<-c('x', 'y') ;
###### Convert the Thin plate smoothing interpolation into a raster file that then can be sampled with the polygons of the tractor file
### predict interpotated values
Plants.2013.Tps.image.V1<-predictSurface(Plants.2013.Tps.V1,grid.list=Rock.View.grid, extrap = T )
Plants.2013.Tps.image.V2<-predictSurface(Plants.2013.Tps.V2,grid.list=Rock.View.grid, extrap = T )
### Convert to a raster and a spatial object
Plants.2013.Tps.sp.V1<-as(raster(Plants.2013.Tps.image.V1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")), 'SpatialGridDataFrame');
Plants.2013.Tps.sp.V2<-as(raster(Plants.2013.Tps.image.V2, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")), 'SpatialGridDataFrame');
#### plot  spatial rasted of interpolated values and the tractor files
plot(Plants.2013.Tps.sp.V1)
plot(Plants.2013.Tps.sp.V2)
plot(TractorGPS,add=T)
Boundary.Polygon<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Boundary_Track_2014-04-11 09_00_54_Polygon.shp") ;
Boundary.Polygon.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\Boundary_Track_2014-04-11 09_00_54_Polygon.shp") ;
Boundary.Polygon<-spTransform(Boundary.Polygon.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )
plot(TractorGPS)
plot(Boundary.Polygon, add=T)
plot(Boundary.Polygon, add=T,col="RED")
Tractor.Inside.Boundary.1<-readOGR("C:\\Felipe\\Willow_Project\\FelipeQGIS\\RockViewSite2013\\ReplantingWillow2014\\TractorCoverageinsideBoudaryTrack.shp") ;
Tractor.Inside.Boundary<-spTransform(Tractor.Inside.Boundary.1, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs") )  ;
plot(Tractor.Inside.Boundary, add=T,col="BLUE")
Tractor.Inside.Boundary@polygons
Tractor.Inside.Boundary@polygons$coords
str(Tractor.Inside.Boundary@polygons)
str(Tractor.Inside.Boundary@polygons[1]
)
str(Tractor.Inside.Boundary@polygons[1][1])
str(Tractor.Inside.Boundary@polygons[1]@coords)
str(Tractor.Inside.Boundary@polygons[[1]])
str(Tractor.Inside.Boundary@polygons[[1]][1])
str(Tractor.Inside.Boundary@polygons)
str(Tractor.Inside.Boundary@polygons[[1]]@Polygons[[1]]@coords)
